import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './AdminSubjects.css';

const AdminSubjects = () => {
  const classesOptions = ['السادسة']; // Predefined class

  const [selectedClass, setSelectedClass] = useState('');
  const [subjects, setSubjects] = useState([]);
  const [selectedSubjectIndex, setSelectedSubjectIndex] = useState(null);
  const [newPeriod, setNewPeriod] = useState({ name: '', urlPic: '' });
  const [selectedPeriodIndex, setSelectedPeriodIndex] = useState(null);
  const [newLesson, setNewLesson] = useState({ name: '', videoLink: '', urlPowerPonit: '', urlPic: '' });

  // Fetch subjects when a class is selected
  useEffect(() => {
    if (selectedClass) {
      axios
        .get("http://localhost:5000/subjects")
        .then(response => {
          const initialSubjects = response.data.map(subject => ({
            ...subject,
            periods: subject.periods || [],
          }));
          setSubjects(initialSubjects);
          setSelectedSubjectIndex(null);
          setSelectedPeriodIndex(null);
        })
        .catch(error => {
          console.error("Error fetching subjects:", error);
        });
    } else {
      setSubjects([]);
      setSelectedSubjectIndex(null);
      setSelectedPeriodIndex(null);
    }
  }, [selectedClass]);

  // Add a new period
  const handleAddPeriod = () => {
    if (newPeriod.name.trim() !== '') {
      const selectedSubject = subjects[selectedSubjectIndex];
      axios
        .post("http://localhost:5000/periods", {
          name: newPeriod.name,
          urlPic: newPeriod.urlPic,
          subjectId: selectedSubject.id,
        })
        .then(response => {
          const updatedSubjects = [...subjects];
          updatedSubjects[selectedSubjectIndex].periods.push(response.data);
          setSubjects(updatedSubjects);
          setNewPeriod({ name: '', urlPic: '' });
        })
        .catch(error => {
          console.error("Error adding period:", error);
        });
    } else {
      alert("Please fill out the period name.");
    }
  };

  // Delete a period
  const handleDeletePeriod = periodIndex => {
    const selectedSubject = subjects[selectedSubjectIndex];
    const periodToDelete = selectedSubject.periods[periodIndex];

    axios
      .delete(`http://localhost:5000/periods/${periodToDelete.id}`)
      .then(() => {
        const updatedSubjects = [...subjects];
        updatedSubjects[selectedSubjectIndex].periods.splice(periodIndex, 1);
        setSubjects(updatedSubjects);
        setSelectedPeriodIndex(null);
      })
      .catch(error => {
        console.error("Error deleting period:", error);
      });
  };

  // Add a new lesson
  const handleAddLesson = () => {
    if (newLesson.name.trim() !== '' && selectedPeriodIndex !== null && selectedSubjectIndex !== null) {
      const selectedPeriod = subjects[selectedSubjectIndex].periods[selectedPeriodIndex];
      axios
        .post("http://localhost:5000/lessons", {
          title: newLesson.name,
          urlVideo: newLesson.videoLink,
          urlPowerPonit: newLesson.urlPowerPonit,
          urlPic: newLesson.urlPic,
          periodId: selectedPeriod.id,
        })
        .then(response => {
          const updatedSubjects = [...subjects];
          updatedSubjects[selectedSubjectIndex].periods[selectedPeriodIndex].lessons.push(response.data);
          setSubjects(updatedSubjects);
          setNewLesson({ name: '', videoLink: '', urlPowerPonit: '', urlPic: '' });
        })
        .catch(error => {
          console.error("Error adding lesson:", error);
        });
    } else {
      alert("Please fill out the lesson name and select a period.");
    }
  };

  // Edit a lesson
  const handleEditLesson = (lessonIndex, updatedLesson) => {
    const selectedPeriod = subjects[selectedSubjectIndex].periods[selectedPeriodIndex];
    const lessonToEdit = selectedPeriod.lessons[lessonIndex];

    axios
      .put(`http://localhost:5000/lessons/${lessonToEdit.id}`, updatedLesson)
      .then(response => {
        const updatedSubjects = [...subjects];
        updatedSubjects[selectedSubjectIndex].periods[selectedPeriodIndex].lessons[lessonIndex] = response.data;
        setSubjects(updatedSubjects);
      })
      .catch(error => {
        console.error("Error editing lesson:", error);
      });
  };

  // Delete a lesson
  const handleDeleteLesson = lessonIndex => {
    const selectedPeriod = subjects[selectedSubjectIndex].periods[selectedPeriodIndex];
    const lessonToDelete = selectedPeriod.lessons[lessonIndex];

    axios
      .delete(`http://localhost:5000/lessons/${lessonToDelete.id}`)
      .then(() => {
        const updatedSubjects = [...subjects];
        updatedSubjects[selectedSubjectIndex].periods[selectedPeriodIndex].lessons.splice(lessonIndex, 1);
        setSubjects(updatedSubjects);
      })
      .catch(error => {
        console.error("Error deleting lesson:", error);
      });
  };

  return (
    <div className="admin-subjects-container">
      <div className="admin-subjects-content">
        <h1>إدارة المواد والفترات والدروس</h1>

        {/* Class selection */}
        <div className="section">
          <h2>إدارة الفصول</h2>
          <select value={selectedClass} onChange={e => setSelectedClass(e.target.value)}>
            <option value="" disabled>
              اختر الفصل
            </option>
            {classesOptions.map((cls, index) => (
              <option key={index} value={cls}>
                {cls}
              </option>
            ))}
          </select>
        </div>

        {/* Subject management */}
        {selectedClass && (
          <div className="section">
            <h2>إدارة المواد</h2>
            <div className="subjects-list">
              {subjects.map((subject, index) => (
                <div key={index} className="subject-item">
                  <h3>{subject.name}</h3>
                  <button onClick={() => setSelectedSubjectIndex(index)}>إدارة الفترات</button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Period management */}
        {selectedSubjectIndex !== null && (
          <div className="section">
            <h2>إدارة الفترات لمادة {subjects[selectedSubjectIndex].name}</h2>
            <input
              type="text"
              placeholder="اسم الفترة"
              value={newPeriod.name}
              onChange={e => setNewPeriod({ ...newPeriod, name: e.target.value })}
            />
            <input
              type="text"
              placeholder="رابط صورة الفترة"
              value={newPeriod.urlPic}
              onChange={e => setNewPeriod({ ...newPeriod, urlPic: e.target.value })}
            />
            <button onClick={handleAddPeriod}>إضافة الفترة</button>

            <div className="periods-list">
              {subjects[selectedSubjectIndex].periods.map((period, index) => (
                <div key={index} className="period-item">
                  <h3>{period.name}</h3>
                  <button onClick={() => handleDeletePeriod(index)}>حذف</button>
                  <button onClick={() => setSelectedPeriodIndex(index)}>إدارة الدروس</button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Lesson management */}
        {selectedPeriodIndex !== null && (
          <div className="section">
            <h2>إدارة الدروس لفترة {subjects[selectedSubjectIndex].periods[selectedPeriodIndex].name} في مادة {subjects[selectedSubjectIndex].name}</h2>
            <input
              type="text"
              placeholder="اسم الدرس"
              value={newLesson.name}
              onChange={e => setNewLesson({ ...newLesson, name: e.target.value })}
            />
            <input
              type="text"
              placeholder="رابط فيديو الدرس (Google Drive)"
              value={newLesson.videoLink}
              onChange={e => setNewLesson({ ...newLesson, videoLink: e.target.value })}
            />
            <input
              type="text"
              placeholder="رابط PowerPoint الدرس (Google Drive)"
              value={newLesson.urlPowerPonit}
              onChange={e => setNewLesson({ ...newLesson, urlPowerPonit: e.target.value })}
            />
            <input
              type="text"
              placeholder="رابط صورة الدرس"
              value={newLesson.urlPic}
              onChange={e => setNewLesson({ ...newLesson, urlPic: e.target.value })}
            />
            <button onClick={handleAddLesson}>إضافة الدرس</button>

            <div className="lessons-list">
              {subjects[selectedSubjectIndex].periods[selectedPeriodIndex].lessons.map((lesson, index) => (
                <div key={index} className="lesson-item">
                  <input
                    type="text"
                    value={lesson.title}
                    onChange={e => handleEditLesson(index, { ...lesson, title: e.target.value })}
                  />
                  <input
                    type="text"
                    value={lesson.urlVideo}
                    onChange={e => handleEditLesson(index, { ...lesson, urlVideo: e.target.value })}
                  />
                  <input
                    type="text"
                    value={lesson.urlPowerPonit}
                    onChange={e => handleEditLesson(index, { ...lesson, urlPowerPonit: e.target.value })}
                  />
                  <input
                    type="text"
                    value={lesson.urlPic}
                    onChange={e => handleEditLesson(index, { ...lesson, urlPic: e.target.value })}
                  />
                  <button onClick={() => handleDeleteLesson(index)}>حذف</button>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminSubjects;
